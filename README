RPC::XML - An implementation of XML-RPC

Version: 0.50

WHAT IS IT

The RPC::XML package is an implementation of XML-RPC. The module provides
classes for sample client and server implementations, a server designed as an
Apache location-handler, and a suite of data-manipulation classes that are
used by them.


USING RPC::XML

There are not any pre-packaged executables in this distribution (except for a
utility tool). Client usage will usually be along the lines of:

    use RPC::XML::Client;
    ...
    my $client = new RPC::XML::Client
        'http://www.oreillynet.com/meerkat/xml-rpc/server.php';
    my $req = RPC::XML::request->new('meerkat.getChannelsBySubstring', 'perl');
    my $res = $client->send_request($req);
    # This returns an object of the RPC::XML::response class. This double-call
    # of value() first gets a RPC::XML::* data object from the response, then
    # the actual data from it:
    my $value = $res->value->value;

Running a simple server is not much more involved:

    use RPC::XML::Server;
    ...
    my $srv = new RPC::XML::Server (host => 'localhost',
                                    port => 9000);
    # You would then use $srv->add_method to add some remotely-callable code
    ...
    $srv->accept_loop; # Stays in an accept/connect loop


BUILDING/INSTALLING

This package is set up to configure and build like a typical Perl extension.
To build:

        perl Makefile.PL
        make && make test

If RPC::XML passes all tests, then:

        make install

You may need super-user access to install.


PROBLEMS/BUG REPORTS

Please send any reports of problems or bugs to rjray@blackperl.com


SEE ALSO

XML-RPC:              http://www.xmlrpc.com/spec
The Artistic License: http://language.perl.com/misc/Artistic.html


CHANGES

Changed the usage of =head3 directives in the manual page for
RPC::XML::Procedure to a =over/=back block instead. The =head3
directive requires a newer set of pod utilities, and would mean the
package had trouble building on 5.005 installations.

Extended the RPC::XML::base64 class to allow for and handle being
given a filehandle object instead of straight data. The object is
kept as an open filehandle, and the buffer position is always noted
and reset when operated on, so that other parts of the process using
the handle don't get surprised. Added tests in t/11_base64_fh.t to
exercise this.

Added a serialize() method to all the data classes in preparation for
changing the client and server modules to stream XML over the line
rather than print it using in-memory strings. Added test suite
t/15_serialize.t to exercise this.

Modified RPC::XML::Parser to accept arguments to new() that instruct
it to spool Base64 data to a filehandle, using the new capabilities
of the base64 class described previously. Added tests to t/20_parser.t
and support for the parameters to the constructors of the client and
base server classes. Documented all around.

Re-engineered the test for the "bytes" pragma in RPC::XML, so that
it now works with Perl 5.005.

Fixed the credentials() method in RPC::XML::Client.

All the internal use of object attributes in RPC::XML::Client now use
accessors instead of the hash keys directly, to make it easier to
sub-class the package. The same was done in RPC::XML::Server and to
some degree in Apache::RPC::Server. The server classes are more likely
to have problems, though.

The parsing of incoming data in the client and both server classes is
now done to a streaming XML parser, eliminating the need for the
full message to ever be in memory at once. Likewise, the client and
server classes have new attributes and accessor methods to allow
them to spool outgoing messages to files if the messages threaten to
be too large to keep in memory (this is best used when dealing with a
lot of Base64 data that is being dealt with directly on disk as well).
